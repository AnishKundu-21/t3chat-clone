// =============================================================
// PRISMA SCHEMA  – MongoDB
// =============================================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// -------------------------------------------------------------
//  NEXT-AUTH STANDARD MODELS  (unchanged)
// -------------------------------------------------------------
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------------------------------------------
//  USER  (+ relation to Chat & UserPreference)
// -------------------------------------------------------------
model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  preference    UserPreference?    // <— NEW one-to-one relation
}

// -------------------------------------------------------------
//  USER PREFERENCE – for storing user settings as JSON
// -------------------------------------------------------------
model UserPreference {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// -------------------------------------------------------------
//  CHAT  – one per conversation / thread
// -------------------------------------------------------------
model Chat {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[] // one-to-many

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// -------------------------------------------------------------
//  CHAT MESSAGE  – individual turns inside a Chat
// -------------------------------------------------------------
model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String   @db.ObjectId
  role      String   // "user" | "assistant"
  content   String
  createdAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}
