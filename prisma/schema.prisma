// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// This tells Prisma to connect to a MongoDB database.
// The connection URL is loaded from the .env file.
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// =========================================
// AUTH.JS MODELS FOR NEXT-AUTH
// These are the standard models required by the Prisma adapter.
// =========================================

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =========================================
// USER MODEL
// We add our custom `hashedPassword` field here for email/password login.
// =========================================

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?  // Our custom field for credentials login
  accounts      Account[]
  sessions      Session[]
}
